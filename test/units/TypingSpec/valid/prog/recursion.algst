data List a
  = Cons a (List a)
  | Nil

length : ∀(a:TU). List a -> Int
length [a] =
  let rec go : Int -> List a -> Int = \(acc:Int) (xs:List a) ->
    case xs of {
      Cons _ xs -> go (acc + 1) xs,
      Nil -> acc
    }
  in go 0

data AltList a b
  = ACons a (AltList b a)
  | ANil

altLength : ∀(a:TU) (b:TU). AltList a b -> Int
altLength =
  let rec go : ∀(a:TU) (b:TU). Int -> AltList a b -> Int =
    \[a:TU] [b:TU] (acc:Int) (xs:AltList a b) ->
      case xs of {
        ACons _ xs -> go [b, a] (acc + 1) xs,
        ANil -> acc
      }
  in go 0
