data IAst = ICon Int | IAdd IAst IAst

protocol PIAst = PICon Int | PIAdd PIAst PIAst

sendIAst : IAst -> forall (s:S). !PIAst.s -> s
sendIAst t [s] c = case t of {
    ICon x     -> select PICon [s] c
               |> send [Int, s] x,
    IAdd tl tr -> select PIAdd [s] c
               |> sendIAst tl [!PIAst.s] |> sendIAst tr [s] }

recvIAst : forall (s:S). ?PIAst.s -> (IAst, s)
recvIAst [s] c =
  match c with {
    PICon c -> let (x, c) = receive [Int, s] c in
               (ICon x, c),
    PIAdd c -> let (tl, c) = recvIAst [?PIAst.s] c in
               let (tr, c) = recvIAst [s] c in
               (IAdd tl tr, c) }

iast : IAst
iast = IAdd (ICon 10) (IAdd (ICon 2) (ICon 3))

main : IAst
main =
  let (c1, c2) = new [!PIAst.End!] in
  let _ = fork_ (terminate <| sendIAst [End!] iast c1) in
  let iast' = fstWait [IAst] <| recvIAst [End?] c2 in
  iast'
