-- toolbox of regular protocols

type Service (p:P) = ∀(s:S). ?p.s -> s

--
protocol Repeat (x:P) = More x (Repeat x) | Quit

repeater : ∀(p:P). Service p -> Service (Repeat p)
repeater [p] serveP [s] c = match c with {
  Quit c -> c,
  More c -> c |> serveP [?Repeat p.s] |> repeater [p] serveP [s]
}

--
protocol Seq (a:P) (b:P) = Seq a b

seq : ∀(p:P). Service p -> ∀(q:P). Service q -> Service (Seq p q)
seq [p] serve_p [q] serve_q [s] c = match c with {
  Seq c ->
    c |> serve_p [?q.s] |> serve_q [s]
}

--
protocol Either (a:P) (b:P) = Left a | Right b

either : ∀(p:P). Service p -> ∀(q:P). Service q -> Service (Either p q)
either [p] serve_p [q] serve_q [s]c =
  match c with {
    Left c  -> serve_p [s] c,
    Right c -> serve_q [s] c
}

-- application: building the arithmetic server from generic pieces

type Neg    = Seq Int -Int
type Add    = Seq Int (Seq Int -Int)
type Arith  = Either Neg Add

serve_Neg : Service Neg
serve_Neg [s] c = match c with {
  Seq c -> let (x, c) = receive [Int,!Int.s] c in
           send [Int,s] (0-x) c
}

serve_Add : Service Add
serve_Add [s] c = match c with {
  Seq c -> let (x, c) = receive [Int, ?Seq Int -Int.s] c in
           match c with {
  Seq c -> let (y, c) = receive [Int, !Int.s] c in
	   send [Int,s] (x+y) c
}}

serve_Arith : Service Arith
serve_Arith = either [Neg] serve_Neg [Add] serve_Add 

serve_Ariths : Service (Repeat Arith)
serve_Ariths = repeater [Arith] serve_Arith
