protocol Arith =
  | Neg Int -Int
  | Add Int Int -Int

serve_arith : forall (s:S). ?Arith.s -> s
serve_arith [s] c =
  match c with {
    Neg c -> let (x, c) = receive [Int, !Int.s] c in
             send [Int] (0-x) [s] c,
    Add c -> let (x, c) = receive [Int, ?Int.!Int.s] c in
             let (y, c) = receive [Int, !Int.s] c in
             send [Int] (x+y) [s] c }

client_neg : forall (s:S). Int -> !Arith.s -> (Int, s)
client_neg [s] x c =
  select Neg [s] c |> send [Int, ?Int.s] x |> receive [Int, s]

client_add : forall (s:S). Int -> Int -> !Arith.s -> (Int, s)
client_add [s] x y c =
  select Add [s] c |> send [Int, !Int.?Int.s] x |> send [Int, ?Int.s] y |> receive [Int, s]

-- from stream...
protocol Stream (a:P) = Next a (Stream a)

type Ariths = Stream Arith

type Service (a:P) = forall (s:S). ?a.s -> s

forever_arith : (forall (s:S). ?Arith.s -> s) -> ?Stream Arith.end -> end
forever_arith serve c =
  match c with {
    Next c -> serve [?Stream Arith.end] c |> forever_arith serve
  }

forever : forall (a:P). Service a -> ?Stream a.end -> end
forever [a] serve c =
  match c with {
    Next c -> serve [?Stream a.end] c |> forever [a] serve
  }

type Arith_Service = Service Arith

forever_arith2 : Service Arith -> ?Stream Arith.end -> end
forever_arith2 = forever [Arith]

forever_arith3 : ?Stream Arith.end -> end
forever_arith3 = forever_arith2 serve_arith

forever_active : forall (a:P). Service a -> !Stream -a.end -> end
forever_active [a] serve c =
  select Next [-a, end] c
  |> serve [!Stream -a.end]
  |> forever_active [a] serve

forever_active_arith : !Stream -Arith.end -> end
forever_active_arith = forever_active [Arith] serve_arith

forever_active_ints : Service -Int -> !Stream Int.end -> end
forever_active_ints = forever_active [-Int]

forever_active_ones : !Stream Int.end -> end
forever_active_ones = forever_active [-Int] (send [Int] 1)

----

forever_active' : forall (a:P). Service a -> Service -(Stream -a)
forever_active' [a] serve [s] c =
  select Next [-a, s] c
  |> serve [!Stream -a.s]
  |> forever_active' [a] serve [s]
