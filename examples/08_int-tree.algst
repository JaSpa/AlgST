data BTree a = Branch (BTree a) (BTree a) | Leaf a

sendIntTree : ∀(s:SL). BTree Int -> !BTree Int.s -> s
sendIntTree [s] t c = case t of {
  Leaf i ->
    select Leaf [Int, s] c
      |> send [Int, s] i,
  Branch t1 t2 ->
    select Branch [Int, s] c
      |> sendIntTree [!BTree Int.s] t1
      |> sendIntTree [s] t2
}

recvIntTree : ∀(s:SL). ?BTree Int.s -> (BTree Int, s)
recvIntTree [s] c = case c of {
  Leaf c ->
    let (i, c) = receive [Int, s] c in
    (Leaf [Int] i, c),
  Branch c ->
    let (t1, c) = recvIntTree [?BTree Int.s] c in
    let (t2, c) = recvIntTree [s] c in
    (Branch [Int] t1 t2, c)
}
