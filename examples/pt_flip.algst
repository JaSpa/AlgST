protocol Flipper = Flipper -Int -Flipper

flipper : !Flipper.end -> end
flipper c = let c = select Flipper [end] c in
            let (x, c) = receive [Int, ?Flipper.end] c in
	    match c with {
	      Flipper c -> send [Int] x [!Flipper.end] c
	             |> flipper
	    }

-- mutual recursion

flip : !Flipper.end -> end
flip c = select Flipper [end] c 
      |> receive [Int, ?Flipper.end]
      |> flop

flop : (Int, ?Flipper.end) -> end
flop p = let (x, c) = p in
         match c with {
	   Flipper c -> send [Int] x [!Flipper.end] c
	          |> flip
	   }
