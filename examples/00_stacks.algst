protocol InfiniteStack
  = Push' Int InfiniteStack
  | Pop' -Int InfiniteStack
  | Quit

protocol EmptyStack
  = Bottom Int Stack EmptyStack
  | Done

protocol Stack
  = Push Int Stack Stack
  | Pop -Int

handleEmptyStack : ∀(s:SL). ?EmptyStack.s -> s
handleEmptyStack [s] c = case c of {
  Bottom c ->
    let (bottom, c) = receive [Int, ?Stack.?EmptyStack.s] c in
    handleStack [?EmptyStack.s] bottom c |> handleEmptyStack [s],
  Done c ->
    c
}

handleStack : ∀(s:SL). Int -> ?Stack.s -> s
handleStack [s] top c = case c of {
  Push c ->
    let (newTop, c) = receive [Int, ?Stack.?Stack.s] c in
    handleStack [?Stack.s] newTop c |> handleStack [s] top,
  Pop c ->
    send [Int, s] top c
}

makeStack : ∀(s:SL). Int -> !Stack.s -> s
makeStack [s] n stc =
  let c = select Push [s] stc in
  let c = send [Int, !Stack.!Stack.s] n c in
  let c =
    if n > 1 then
      let c = makeStack [!Stack.s] (n - 1) c in
      c
    else -- n <= 0
      let c = select Pop [!Stack.s] c in
      let (x1, c) = receive [Int, !Stack.s] c in
      c
  in
      let c = select Pop [s] c in
      let (x, c) = receive [Int, s] c in
      -- assert x == n
      c


interaction : ∀(s:SL). !EmptyStack.s -> !EmptyStack.s
interaction [s] c =
  let c = select Bottom [s] c in
  let c = send [Int, !Stack.!EmptyStack.s] 5 c in
  let c = select Pop [!EmptyStack.s] c in
  let (x, c) = receive [Int, !EmptyStack.s] c in
  c
