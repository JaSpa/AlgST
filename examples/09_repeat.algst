protocol Repeat (x:P) = More x (Repeat x) | Quit

type Service (p:P) = ∀(s:SL). ?p.s -> s

repeater : ∀(p:P). Service p -> Service (Repeat p)
repeater [p] serveP [s] c = match c with {
  Quit c -> c,
  More c -> serveP [?Repeat p.s] c |> repeater [p] serveP [s]
}

----------------------------------------------------------------------
-- application to arith
----------------------------------------------------------------------

protocol Arith =
  | Neg Int -Int
  | Add Int Int -Int

serve_arith : Service Arith
serve_arith [s] c =
  match c with {
    Neg c -> let (x, c) = receive [Int, !Int.s] c in
             send [Int] (0-x) [s] c,
    Add c -> let (x, c) = receive [Int, ?Int.!Int.s] c in
             let (y, c) = receive [Int, !Int.s] c in
             send [Int] (x+y) [s] c }

repeated_arith : Service (Repeat Arith)
repeated_arith = repeater [Arith] serve_arith

client1 : dual (?Repeat Arith.end) -> end
client1 c = select Quit [Arith, end] c

-- client2 : dual (?Repeat Arith.end) -> end
-- client2 c = select More [Arith, end] c

repeater_active : Int -> ∀(p:P). Service p -> Service -(Repeat -p)
repeater_active n [p] serveP [s] c = 
  if n==0
  then select Quit [-p,s] c
  else select More [-p,s] c |>
       serveP [?(-Repeat -p).s] |>
       repeater_active (n-1) [p] serveP [s]

