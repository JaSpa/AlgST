protocol Repeat (x:P) = More x (Repeat x) | Quit
protocol Dual (x:P) = Dual -x

type Seed : MU = Int
type RNG  : SL = !Repeat (Dual Int).End!

seedRNG : Seed -> RNG

randPair : Seed -> (Int, Int)
randPair seed =
  let c = seedRNG seed in
  let (a, c) =
    select More [Dual Int, End!] c
      |> select Dual [Int, !Repeat (Dual Int).End!]
      |> receive [Int, !Repeat (Dual Int).End!]
  in
  let (b, c) =
    select More [Dual Int, End!] c
      |> select Dual [Int, !Repeat (Dual Int).End!]
      |> receive [Int, !Repeat (Dual Int).End!]
  in
  let _ = terminate <| select Quit [Dual Int, End!] c in
  (a, b)
